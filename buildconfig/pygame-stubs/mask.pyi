from typing import List, Optional, Sequence, Text, Tuple, TypeVar, Union

from . import color, math, rect, surface

_Coordinate = Union[Tuple[float, float], Sequence[float], math.Vector2]
_ColorValue = Union[color.Color, Tuple[int, int, int], Sequence[int], int, Tuple[int, int, int, int]]
_ToSurfaceColorValue = Union[color.Color, Tuple[int, int, int], Sequence[int], int, Text, Tuple[int, int, int, int]]
_RectValue = Union[
    rect.Rect, Union[Tuple[int, int, int, int], Sequence[int]], Union[Tuple[_Coordinate, _Coordinate], Sequence[_Coordinate]],
]
_Offset = TypeVar("_Offset", Tuple[int, int], Sequence[int])

def from_surface(surface: surface.Surface, threshold: Optional[int] = ...) -> Mask: ...
def from_threshold(
    surface: surface.Surface,
    color: _ColorValue,
    threshold: Optional[_ColorValue] = ...,
    other_surface: Optional[surface.Surface] = ...,
    palette_colors: Optional[int] = ...,
) -> Mask: ...

class Mask:
    def __init__(self, size: Union[Sequence[int], Tuple[int, int]], fill: Optional[bool] = ...) -> None: ...
    def copy(self) -> Mask: ...
    def get_size(self) -> Tuple[int, int]: ...
    def get_rect(self, **kwargs: int) -> rect.Rect: ...
    def get_at(self, pos: Union[Sequence[int], Tuple[int, int]]) -> int: ...
    def set_at(self, pos: Union[Sequence[int], Tuple[int, int]], value: Optional[int] = ...) -> None: ...
    def overlap(self, othermask: Mask, offset: _Offset) -> Union[Tuple[int, int], None]: ...
    def overlap_area(self, othermask: Mask, offset: _Offset) -> int: ...
    def overlap_mask(self, othermask: Mask, offset: _Offset) -> Mask: ...
    def fill(self) -> None: ...
    def clear(self) -> None: ...
    def invert(self) -> None: ...
    def scale(self, size: Sequence[int]) -> Mask: ...
    def draw(self, othermask: Mask, offset: _Offset) -> None: ...
    def erase(self, othermask: Mask, offset: _Offset) -> None: ...
    def count(self) -> int: ...
    def centroid(self) -> Tuple[int, int]: ...
    def angle(self) -> float: ...
    def outline(self, every: Optional[int] = ...) -> List[Tuple[int, int]]: ...
    def convolve(self, othermask: Mask, outputmask: Optional[Mask] = ..., offset: Optional[_Offset] = ...) -> Mask: ...
    def connected_component(self, pos: Union[Sequence[int], Tuple[int, int]] = ...) -> Mask: ...
    def connected_components(self, min: Optional[int] = ...) -> List[Mask]: ...
    def get_bounding_rects(self) -> rect.Rect: ...
    def to_surface(
        self,
        surface: Optional[surface.Surface] = ...,
        setsurface: Optional[surface.Surface] = ...,
        unsetsurface: Optional[surface.Surface] = ...,
        setcolor: Optional[_ToSurfaceColorValue] = ...,
        unsetcolor: Optional[_ToSurfaceColorValue] = ...,
        dest: Optional[Union[_RectValue, _Coordinate]] = ...,
    ) -> surface.Surface: ...
