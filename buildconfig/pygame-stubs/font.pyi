from typing import AnyStr, IO, Hashable, List, Optional, Sequence, Tuple, Union

from . import color, surface

_ColorValue = Union[color.Color, Tuple[int, int, int], Sequence[int], int, Tuple[int, int, int, int]]

def init() -> None: ...
def quit() -> None: ...
def get_init() -> bool: ...
def get_default_font() -> str: ...
def get_fonts() -> List[str]: ...
def match_font(name: str, bold: Optional[Hashable] = ..., italic: Optional[Hashable] = ...) -> str: ...
def SysFont(name: str, size: int, bold: Optional[Hashable] = ..., italic: Optional[Hashable] = ...) -> Font: ...

class Font(object):
    bold: bool
    italic: bool
    underline: bool
    def __init__(self, name: Union[str, IO[AnyStr], None], size: int) -> None: ...
    def render(
        self, text: str, antialias: bool, color: _ColorValue, background: Optional[_ColorValue] = ...
    ) -> surface.Surface: ...
    def size(self, text: str) -> Tuple[int, int]: ...
    def set_underline(self, value: bool) -> None: ...
    def get_underline(self) -> bool: ...
    def set_bold(self, value: bool) -> None: ...
    def get_bold(self) -> bool: ...
    def set_italic(self, value: bool) -> None: ...
    def metrics(self, text: str) -> List[Tuple[int, int, int, int, int]]: ...
    def get_italic(self) -> bool: ...
    def get_linesize(self) -> int: ...
    def get_height(self) -> int: ...
    def get_ascent(self) -> int: ...
    def get_descent(self) -> int: ...

